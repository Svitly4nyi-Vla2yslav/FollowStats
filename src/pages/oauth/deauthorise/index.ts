import { NextApiRequest, NextApiResponse } from "next";
import crypto from "crypto"; // –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å—É –≤ signed_request

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const { signed_request } = req.body; // –û—Ç—Ä–∏–º—É—î–º–æ signed_request –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É

    if (!signed_request) {
        return res.status(400).json({ error: "ü§£ Missing signed request" });
    }

    try {
        // –†–æ–∑–¥—ñ–ª—è—î–º–æ signed_request –Ω–∞ –ø—ñ–¥–ø–∏—Å —ñ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        const [signature, payload] = signed_request.split('.');

        // –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ —Ç–∞ –¥–µ–∫–æ–¥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        const decodedPayload = Buffer.from(payload, 'base64').toString('utf-8');
        const data = JSON.parse(decodedPayload); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ JSON-—Å—Ç—Ä—ñ—á–∫—É –≤ –æ–±'—î–∫—Ç

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º App Secret
        const expectedSignature = crypto
            .createHmac('sha256', process.env.NEXT_PUBLIC_FACEBOOK_CLIENT_SECRET as string)
            .update(payload)
            .digest('base64')
            .replace(/\+/g, '-')
            .replace(/\//g, '_')
            .replace(/=+$/, ''); // –ü—Ä–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥–ø–∏—Å –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å
        if (signature !== expectedSignature) {
            return res.status(400).json({ error: "Invalid signature" });
        }

        // –Ø–∫—â–æ –ø—ñ–¥–ø–∏—Å –≤—ñ—Ä–Ω–∏–π, –æ–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ
        console.log("Deauthorized user data:", data);
        res.status(200).json({ message: "Deauthorization successful", data });
    } catch (error) {
        console.error("ü§™ Failed to decode signed request:", error);
        return res.status(500).json({ error: "üò© Failed to decode signed request" });
    }
}